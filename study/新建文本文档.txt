JavaScript Array对象
	数组属性：
        constructor  返回创建数组对象的原型函数。
        length       设置或返回数组元素的个数。
        prototype    允许你向数组对象添加属性或方法
    Array对象方法：
        concat（）   连接两个或更多的数组，并返回结果。
                定义和用法：
                    concat（）方法用于连接两个或多个数组。
                    该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。！！！！！！！！！！！！！！！！！！！！！！！！！！！
                语法：
                    array1.concat(array2,array3,……,arrayX);
                参数：
                    array2,array3,……,arrayX  必需。该参数可以是具体的值，也可以是数组对象。可以是任意多个。
                返回值：
                    Array对象       返回一个新的数组。该数组是通过把所有arrayX参数添加到arrayObject中生成的。如果要进行concat（）操作的参数是数组，那么添加的是数组中的元素，而不是数组。
        copyWithin（） 方法用于从数组的指定位置拷贝元素到数组的另一个指定位置中。     会对原数组进行，但不会修改原数组长度。
               语法：
                    array.copyWithin（target, start, end）;
                参数：
                    target  必需。复制到指定目标索引位置。
                    start   可选。元素复制的起始位置。（默认为0）
                    end     可选。停止复制的索引位置（默认为array.length）。如果为负值，表示倒数。
        entries()   返回数组的可迭代对象。
                entries() 方法返回一个数组的迭代对象，该对象包含数组的键值对（key/value）。
                迭代对象中数组的索引值作为key，数组元素作为value。
                    例：
                        var fruits=["Banana","Orange","Apple","Mango"];
                        fruits.entries();
                            [0,"Banana"]
                            [1,"Orange"]
                            [2,"Apple"],
                            [3,"Mango"]
                语法：
                    array.entries();
        every() 检查数值元素的每个元素是否都符合条件。    不会改变原数组。
                every（）方法用于检测数组所有元素是否都符合指定条件。（通过函数提供）。
                every（）方法使用指定函数检测数组中的所有元素。
                            .如果数组中检测到有一个元素不满足，则整个表达式返回false，且剩余的元素不会再进行检测。
                            .如果所有元素都满足条件，则返回true。
                    注意：every（）不会对空数组进行检测。
                    注意：every（）不会改变原始数组。
                语法：
                    array.every( function(currentValue,index,arr), thisValue);
                参数说明：
                    function(currentValue,index,arr)  必须。函数，数组中的每个元素都会执行这个函数。
                                函数参数:
                                    currentValue 必须。当前元素的值。
                                    index 可选。当前元素的索引值。
                                    arr 可选。当前元素属于的数组对象。
                    thisValue       可选。对象作为该执行回调时使用，传递给函数，用作“this”的值。
                                    如果省略了thisValue，“this”的值为“undefined”
                返回值：    布尔值。如果所有元素都通过检测返回true，否则返回false。
        fill()  使用一个固定值来填充数组。
                    fill（）方法用于将一个固定值替换数组的元素。
                语法：
                    array.fill(value,start,end);
                参数：
                    value       必须。填充的值。
                    start       可选。开始填充位置。
                    end         可选。停止填充位置（默认为array.length）
                返回值：    数组。
        filter() 检测数值元素，并返回符合条件所有元素的数组。
                定义和用法：
                    filter（） 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。
                注意：
                    filter（）不会对空数组进行检测。
                    filter（）不会改变原始数组。
                语法：
                    array.filter( function(currentValue,index,arr) , thisValue);
                参数说明：
                    function(currentValue,index,arr)    必须。函数，数组中的每个元素都会执行这个函数。
                                        函数参数：
                                            currentValue    必须。当前元素的值。
                                            index           可选。当前元素的索引值。
                                            arr             可选。当前元素属于的数组对象。
                    thisValue       可选。对象作为该执行回调时使用，传递给函数，用作“this”的值。
                                    如果省略了thisValue，“this”的值为“undefined”
                返回值：        返回数组，包含了符合条件的所有元素。如果没有符合条件的元素则返回空数组。
        find()  返回符合传入测试（函数）条件的数组元素。
                find() 方法返回通过测试（函数内判断）的数组的第一个元素的值。
                find（）方法为数组中的每个元素都调用一次函数执行：
                       .当数组中的元素在测试条件时返回true时，find()返回符合条件的元素，之后的值不会再调用执行函数。
                       .如果没有符合条件的元素返回undefined。
                注意：
                    find()对于空数组，函数是不会执行的。
                    find()并没有改变数组的原始值。
                语法：
                    array.find(function(currentValue,index,arr),thisValue);
                参数：
                    function(currentValue,index,arr)    必须。数组中每个元素需要执行的函数。
                                        函数参数：
                                            currentValue：必须。当前元素。
                                            index：可选。当前元素的索引值。
                                            arr: 可选。当前元素所属的数组对象。
                    thisValue   可选。传递给函数的值一般用“this”值。
                                如果这个参数为空，“undefined”会传递给“this”值。
                返回值：    返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回undefined。
        findIndex()  返回符合传入测试（函数）条件的数组元素索引。
                定义和用法：
                    findIndex（）方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。
                    findIndex（）方法为数组中的每个元素都调用一次函数执行。
                        当数组中的元素在测试条件时返回true时，findIndex()返回符合条件的元素的索引位置，之后的值不会再调用执行函数。
                        如果没有符合条件的元素返回-1。
                注意：
                    findIndex（）对于空数组，函数是不会执行的。
                    findIndex（）并没有改变数组的原始值。
                语法：
                    array.findIndex( function(currentValue,index,arr), thisValue)
                参数说明：
                    function(currentValue ,index ,arr)     必须。数组中每个元素需要执行的函数。
                                函数参数：
                                    currentValue：必须。当前元素。
                                    index：可选。当前元素的索引值。
                                    arr：可选。当前元素所属的数组对象。
                    thisValue：可选。传递给函数的值一般用“this”值。如果这个参数为空，“undefined”会传递给“this”值。
                返回值：返回符合测试条件的第一个数组元素索引，如果没有符合条件的则返回-1.
        forEach() 数组每个元素都执行一次回调函数。
                定义和用法：
                    forEach（）方法用于调用数组的每个元素，并将元素传递给回调函数。
                注意：forEach（）对于空数组是不会执行回调函数的。
                语法：
                    array.forEach( function(currentValue,index,arr),thisValue)
                参数说明：
                    function(currentValue,index,arr) 必须。数组中每个元素需要调用的函数。
                                 函数参数：
                                    currentValue：必须。当前元素。
                                    index：可选。当前元素的索引值。
                                    arr：可选。当前元素所属的数组对象。
                    thisValue：可选。传递给函数的值一般用“this”值。如果这个参数为空，“undefined”会传递给“this”值。
        from() 通过给定的对象中创建一个数组。
                定义和用法：
                    from方法用于通过拥有length属性的对象或可迭代的对象来返回一个数组。
                        如果对象是数组返回true，否则返回false。
                语法：
                    Array.from(object,mapFunction,thisValue);
                参数说明：
                    object    必须，要转换为数组的对象。
                    mapFunction   可选，数组中每个元素都要调用的函数。
                    thisValue   可选，映射函数（mapFunction）中的this对象。
                返回值：    数组对象。
        includes() 判断一个数组是否包含一个指定的值。
        indexOf() 搜索数组中的元素，并返回它所在的位置。
        isArray() 判断对象是否是数组
        join() 把数组中的所有元素放到一个字符串当中。
        keys() 返回数组的可迭代对象，包含原始数组的键（key）.
        lastIndexOf() 返回一个指定的字符串值最后出现的位置，在一个字符串中的指定位置从后向前搜索。
        map() 通过指定函数处理数组的每个元素，并返回处理后的数组。
        pop() 删除数组的最后一个元素并返回删除的元素。
        push() 向数组的末尾添加一个或更多元素，并返回新的长度。
        reduce() 将数组元素计算为一个值（从左到右）
        reduceRight() 将数组元素计算为一个值（从右到左）
        reverse() 反转数组的元素顺序。
        shift() 删除并返回数组的第一个元素。
        slice() 选取数组的一部分，并返回新的数组。
        some() 检测数组元素中是否有元素符合指定条件。
        sort() 对数组的元素进行排序。
        splice() 从数组中添加或删除元素。
        toString() 把数组转成字符串，并返回结果。
        unshift() 向数组的开头添加一个或更多元素，并返回新的长度。
        valueOf() 返回数组对象的原始值。        

                
                    